// first step of tesselation shader
// tesselation control shader add/deletes control points and determines the tesselatation level
// patch has three control points here (three vertices for each triangle)


#version 450 core
layout (vertices =3) out;


// vectors stored as arrays - each patch has three vertices, each with an xyz pos and xyz norm value 
//posVS = position from Vertex Shader, posTC = position from this Tesselation Control shader


uniform vec3 viewPos ;


//in vec3 posVS[] ;
//in vec3 normVS[] ;

in vec2 TexCoords[] ;
in vec3 FragPos[] ;

out vec3 posTC[] ;
//out vec3 normTC[] ;
out vec2 TexTC[] ;



float GetTessLevel(float Distance0, float Distance1)
{
    float AvgDistance = (Distance0, + Distance1) / 2.0;


    if (AvgDistance <= 5)
    {   
        return 900;
    }
    else if (AvgDistance <= 10)
    {   
        return 700;
    }
    else if (AvgDistance <= 15)
    {   
        return 300;
    }
    else if (AvgDistance <= 25)
    {   
        return 50;
    }
    else if (AvgDistance <= 100)
    {   
        return 10;
    }
    else
    {
        return 5;
    }

}

void main()
{
  // tesselation level; we will find this automatically later but for now hardcoded value
   int tessLevel =1;

   // gpu can calculate each control point in parallel
   // tesselation level same for entire patch so only need to set it once (for the first control point)
   // gl_invocation called for each control point

   // pass through position and normal information
   posTC[gl_InvocationID]  = FragPos[gl_InvocationID] ;
   //normTC[gl_InvocationID] = normVS[gl_InvocationID] ;
   TexTC[gl_InvocationID] = TexCoords[gl_InvocationID] ;
   if (gl_InvocationID==0)
   {
            
          float camToVertexDist0 = distance(viewPos, posTC[0]);
          float camToVertexDist1 = distance(viewPos, posTC[1]);
          float camToVertexDist2 = distance(viewPos, posTC[2]);
            
		   // Calculate the tessellation levels
          //gl_TessLevelOuter[0] = tessLevel ; 
          //gl_TessLevelOuter[1] = tessLevel ; 
          //gl_TessLevelOuter[2] = tessLevel ;
          //gl_TessLevelInner[0] = tessLevel ; 

          gl_TessLevelOuter[0] = GetTessLevel(camToVertexDist1, camToVertexDist2) ; 
          gl_TessLevelOuter[1] = GetTessLevel(camToVertexDist2, camToVertexDist0) ; 
          gl_TessLevelOuter[2] = GetTessLevel(camToVertexDist0, camToVertexDist1) ;
          gl_TessLevelInner[0] = gl_TessLevelOuter[2] ; 

   }

   

}


